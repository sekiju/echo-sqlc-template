// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: token.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
insert into tokens(access_token, refresh_token, user_id, expired_at)
values ($1, $2, $3, $4)
returning id, access_token, refresh_token, user_id, expired_at, created_at, updated_at, version
`

type CreateTokenParams struct {
	AccessToken  string           `json:"accessToken"`
	RefreshToken string           `json:"refreshToken"`
	UserID       int32            `json:"userId"`
	ExpiredAt    pgtype.Timestamp `json:"expiredAt"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.UserID,
		arg.ExpiredAt,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserID,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const deleteTokenByID = `-- name: DeleteTokenByID :exec
delete
from tokens
where id = $1
`

func (q *Queries) DeleteTokenByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTokenByID, id)
	return err
}

const getToken = `-- name: GetToken :one
select id, access_token, refresh_token, user_id, expired_at, created_at, updated_at, version
from tokens
where (id = $1 or $1 is null)
   or (access_token = $2 or $2 is null)
   or (refresh_token = $3 or $3 is null)
limit 1
`

type GetTokenParams struct {
	ID           int32  `json:"id"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, getToken, arg.ID, arg.AccessToken, arg.RefreshToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserID,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getUserByTokenID = `-- name: GetUserByTokenID :one
select u.id, u.enabled, u.email, u.username, u.password, u.role, u.avatar, u.created_at, u.updated_at, u.version
from users u
         join tokens t on u.id = t.user_id
where t.id = $1
limit 1
`

func (q *Queries) GetUserByTokenID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByTokenID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Enabled,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
update tokens
set access_token  = case when $1::boolean then $2::varchar(48) else access_token end,
    refresh_token = case when $3::boolean then $4::varchar(64) else refresh_token end,
    expired_at    = case when $5::boolean then $6::timestamp else expired_at end,
    updated_at    = now(),
    version       = version + 1
where id = $7
returning id, access_token, refresh_token, user_id, expired_at, created_at, updated_at, version
`

type UpdateTokenParams struct {
	AccessTokenDoUpdate  bool             `json:"accessTokenDoUpdate"`
	AccessToken          string           `json:"accessToken"`
	RefreshTokenDoUpdate bool             `json:"refreshTokenDoUpdate"`
	RefreshToken         string           `json:"refreshToken"`
	ExpiredAtDoUpdate    bool             `json:"expiredAtDoUpdate"`
	ExpiredAt            pgtype.Timestamp `json:"expiredAt"`
	ID                   int32            `json:"id"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, updateToken,
		arg.AccessTokenDoUpdate,
		arg.AccessToken,
		arg.RefreshTokenDoUpdate,
		arg.RefreshToken,
		arg.ExpiredAtDoUpdate,
		arg.ExpiredAt,
		arg.ID,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserID,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
