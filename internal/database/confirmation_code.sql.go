// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: confirmation_code.sql

package database

import (
	"context"
)

const confirmationCodeRecentlyExists = `-- name: ConfirmationCodeRecentlyExists :one
select exists (
    select 1
    from confirmation_codes
    where user_id = $1
      and type = $2
      and created_at > now() - interval '15 minutes'
)
`

type ConfirmationCodeRecentlyExistsParams struct {
	UserID int32                `json:"userId"`
	Type   ConfirmationCodeType `json:"type"`
}

func (q *Queries) ConfirmationCodeRecentlyExists(ctx context.Context, arg ConfirmationCodeRecentlyExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, confirmationCodeRecentlyExists, arg.UserID, arg.Type)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createConfirmationCode = `-- name: CreateConfirmationCode :one
insert into confirmation_codes(recipient, code, type, user_id)
values ($1, $2, $3, $4)
returning id, created_at, recipient, code, type, user_id
`

type CreateConfirmationCodeParams struct {
	Recipient string               `json:"recipient"`
	Code      string               `json:"code"`
	Type      ConfirmationCodeType `json:"type"`
	UserID    int32                `json:"userId"`
}

func (q *Queries) CreateConfirmationCode(ctx context.Context, arg CreateConfirmationCodeParams) (ConfirmationCode, error) {
	row := q.db.QueryRow(ctx, createConfirmationCode,
		arg.Recipient,
		arg.Code,
		arg.Type,
		arg.UserID,
	)
	var i ConfirmationCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Recipient,
		&i.Code,
		&i.Type,
		&i.UserID,
	)
	return i, err
}

const deleteConfirmationCodeByID = `-- name: DeleteConfirmationCodeByID :exec
delete
from confirmation_codes
where id = $1
`

func (q *Queries) DeleteConfirmationCodeByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteConfirmationCodeByID, id)
	return err
}

const getConfirmationCodeByID = `-- name: GetConfirmationCodeByID :one
select id, created_at, recipient, code, type, user_id
from confirmation_codes
where id = $1
limit 1
`

func (q *Queries) GetConfirmationCodeByID(ctx context.Context, id int32) (ConfirmationCode, error) {
	row := q.db.QueryRow(ctx, getConfirmationCodeByID, id)
	var i ConfirmationCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Recipient,
		&i.Code,
		&i.Type,
		&i.UserID,
	)
	return i, err
}

const getConfirmationCodeByTypeAndCode = `-- name: GetConfirmationCodeByTypeAndCode :one
select id, created_at, recipient, code, type, user_id
from confirmation_codes
where type = $1
  and code = $2
  and created_at >= now() - interval '15 minutes'
limit 1
`

type GetConfirmationCodeByTypeAndCodeParams struct {
	Type ConfirmationCodeType `json:"type"`
	Code string               `json:"code"`
}

func (q *Queries) GetConfirmationCodeByTypeAndCode(ctx context.Context, arg GetConfirmationCodeByTypeAndCodeParams) (ConfirmationCode, error) {
	row := q.db.QueryRow(ctx, getConfirmationCodeByTypeAndCode, arg.Type, arg.Code)
	var i ConfirmationCode
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Recipient,
		&i.Code,
		&i.Type,
		&i.UserID,
	)
	return i, err
}
